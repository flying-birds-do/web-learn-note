import{_ as s,c as a,o as l,a as n}from"./app.60e268f6.js";const u=JSON.parse('{"title":"3.1 Promise","description":"","frontmatter":{},"headers":[{"level":2,"title":"3.2 箭头函数和普通函数的区别","slug":"_3-2-箭头函数和普通函数的区别","link":"#_3-2-箭头函数和普通函数的区别","children":[{"level":3,"title":"3.3 Es6新特性","slug":"_3-3-es6新特性","link":"#_3-3-es6新特性","children":[]},{"level":3,"title":"3.3 前端缓存的理解或者前端数据持久化的理解","slug":"_3-3-前端缓存的理解或者前端数据持久化的理解","link":"#_3-3-前端缓存的理解或者前端数据持久化的理解","children":[]},{"level":3,"title":"3.4 防抖和节流","slug":"_3-4-防抖和节流","link":"#_3-4-防抖和节流","children":[]},{"level":3,"title":"3.5 闭包","slug":"_3-5-闭包","link":"#_3-5-闭包","children":[]},{"level":3,"title":"3.6 原型链","slug":"_3-6-原型链","link":"#_3-6-原型链","children":[]}]}],"relativePath":"3/3.1.md"}'),e={name:"3/3.1.md"},p=n(`<p>#前端面试八股文</p><h1 id="_3-1-promise" tabindex="-1">3.1 Promise <a class="header-anchor" href="#_3-1-promise" aria-hidden="true">#</a></h1><p>1.Promise 是一种为了避免回调地狱的异步解决方案. 2. Promse是一种状态机: 它的状态不受外界影响,pending(进行中)、fulfiled(已成功) 和rejected (已失败) 只有一步操作的结果,可以决定当前是哪一种状态,任何其他操作都无法改变这个状态. 3. Promise是最早由社区提出和实现的一种解决异步编程的方案,比其他传统的解决方案更合理和更强大. 4. Es6将其写进了语言标准,统一了用法,原生提供了Promise对象.Es6对象是一个构造函数,用来生成Promise实例. 5. Promise的三个缺点</p><ol><li>无法取消Promise,一旦新建它就会立即执行,无法中途取消</li><li>如果不设置回调函数,Promise内部抛出的错误,不会反映到外部</li><li>当处于pending状态时,无法得知目前进展到哪一个阶段,是刚刚开始还说即将完成.</li></ol><h2 id="_3-2-箭头函数和普通函数的区别" tabindex="-1">3.2 箭头函数和普通函数的区别 <a class="header-anchor" href="#_3-2-箭头函数和普通函数的区别" aria-hidden="true">#</a></h2><ol><li>箭头函数没有this,所以需要通过查找作用域链来确定this的值,这就意味着如果箭头函数被非箭头函数包含,this绑定的就是最近一层非肩头函数的this.</li><li>箭头函数没有自己的arguments对象,但是可以访问外围函数的arguments对象.</li><li>不能通过new关键字调用,同样也没有new.target值和原型.</li></ol><h5 id="箭头函数的优点" tabindex="-1">箭头函数的优点: <a class="header-anchor" href="#箭头函数的优点" aria-hidden="true">#</a></h5><ol><li>愈发更加简洁、清晰</li><li>箭头函数不会创建自己的this,它只会从自己的作用于链的上一层继承this.</li><li>箭头函数继承而来的this指向永远不变</li><li>.call() .apply() .bind 无法改变箭头函数中的this的指向.</li><li>箭头函数不能作为构造函数使用.</li><li>箭头函数没有自己的arguments ,可以在箭头函数中使用reset参数代替arguments对象,来访箭头函数的参数列表.</li><li>箭头函数没有原型prototype</li><li>箭头函数不能用作Generator函数 ,不能使用yeild关键字.</li><li>箭头函数不具有super,不具有new.target</li></ol><h3 id="_3-3-es6新特性" tabindex="-1">3.3 Es6新特性 <a class="header-anchor" href="#_3-3-es6新特性" aria-hidden="true">#</a></h3><ol><li><p>let (let允许创建块级作用于皮域 (最靠近的一个花括号内有效),不具备变量提升,不允许重复声明)、const(从身体允许创建块级作用域、变量声明不提升、const在声明时必须被赋值、声明时大写变量)、</p></li><li><p>箭头函数Es6中,箭头函数就是函数的一种简写形式,使用括号包裹参数,跟随一个=&gt; 紧接着时函数体:</p></li><li><p>函数默认参数值 箭头函数允许你对函数参数设置默认值.</p></li><li><p>对象超类,Es6允许在对象中使用super方法</p></li><li><p>Map vs WeakMap Es6 中两种新的数据结构集: Map和WeakMap.事实上每个对象都可以看作一个是Map.</p></li><li><p>类 Es6中有class语法,值得注意是,这里的class不是新的对象继承模型,它只是圆形链的语法糖表现形式.函数中使用static关键词定义构造函数的方法和属性:</p></li><li><p>null 和undefined的区别</p></li><li><p>undefined 表示一个变量没有被声明,或者被声明了但是没有被赋值,一个没有传入实参的形参变量的值为undefined,如果一个函数什么都不返回,则该函数默认返回undefined.null则表示 什么都没有.null是用来让程序员表明魔偶哥用var声明的变量时没有值的.</p></li><li><p>call bind apply区别</p></li></ol><p>apply接受两个参数,第一个参数时this的指向,第二个参数时函数接受的参数,以数组的形式传入,且当第一个参数为null、undefined的时候,表示指向window,和apply一样 call也只是临时改变一次this指向,并立即执行.</p><ol start="10"><li>bind方法</li><li>bind方法和call很相似,第一参数也是this的指向,后面传入的也一个参数列表,但是这个参数列表可以分多次传入,call则必须一次性传入所有的参数,但是他改变的this执行后不会立即执行,而是返回一个永久改变的this指向的函数.</li></ol><h3 id="_3-3-前端缓存的理解或者前端数据持久化的理解" tabindex="-1">3.3 前端缓存的理解或者前端数据持久化的理解 <a class="header-anchor" href="#_3-3-前端缓存的理解或者前端数据持久化的理解" aria-hidden="true">#</a></h3><p>前端缓存分为Http缓存和浏览器缓存 其中http缓存时在http请求传输时用到的缓存,主要在服务器代码上设置;而浏览器缓存主要由前端开发在签单js进行设置.</p><p>缓存时性能优化中简单高效的一种优化方式.一个优秀的缓存策略可以缩短网页请求资源的距离,减少延迟,并且由于缓存文件可以重复利用,还可以减少贷款,降低网络负荷. 对于一个数据请求来说,可以分为发起网络请求、后端处理 浏览器相应三个步骤.刘看齐缓存可以帮助我们在第一和第三步骤中优化性能.比如说直接使用缓存而不发器请求,或者发起了请求单后段存储的数据和前端一致. 强制缓存就算向浏览器缓存查找该请求结果,并根据该结果的缓存规则来决定是否使用该缓存结果的过程,强制缓存的情况主要有三种:</p><ol><li><p>不存在该缓存结果和缓存标识,强制缓存失效,则直接向服务器发器请求.</p></li><li><p>存在该缓存结果和缓存标识,但该结果已经失效,强制缓存失效,则使用协商缓存.</p></li><li><p>存在该缓存结果和缓存标识,且该结果尚未失效,强制缓存生效,直接返回该结果. 协商缓存就是强制缓存失效后,浏览器携带缓存标识向服务器发器请求,由服务器根据缓存标识决定是否使用缓存的过程.</p></li><li><p>协商缓存生效,返回304</p></li><li><p>协商缓存失效,返回200和请求结果</p></li></ol><h3 id="_3-4-防抖和节流" tabindex="-1">3.4 防抖和节流 <a class="header-anchor" href="#_3-4-防抖和节流" aria-hidden="true">#</a></h3><h4 id="防抖-debounce" tabindex="-1">防抖(debounce) <a class="header-anchor" href="#防抖-debounce" aria-hidden="true">#</a></h4><p>所谓防抖,就是指出发事件后在n秒内函数只能执行一次,如果在n秒又触发了事件,则会重新计算函数执行时间. 非立即执行版的意思就说触发时间后函数不会立即执行,而是n秒后执行,如果在n秒内又触发了事件,则会重新计算函数执行时间. 立即执行版的意思是触发事件后函数会立即执行,然后n秒内补触发事件才能继续执行函数的效果.</p><p>有的操作是高频触发的，但是其实触发一次就好了，比如我们短时间内多次缩放页面，那么我们不应该每次缩放都去执行操作，应该只做一次就好。再比如说监听输入框的输入，不应该每次都去触发监听，应该是用户完成一段输入后在进行触发。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">防抖就是等用户高频操作结束 在进行操作</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">search搜索联想，用户在不断输入值时，用防抖来节约请求资源</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">设计思路: 事件触发后开启一个定时器,如果事件在这个定时器限定的时间内再次触发,则清除定时器,在写一个定时器,定时时间到则触发.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">function debounce (fn,delay) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  let timer = null;</span></span>
<span class="line"><span style="color:#A6ACCD;">  return function () {</span></span>
<span class="line"><span style="color:#A6ACCD;">    clearTimeout(timer)</span></span>
<span class="line"><span style="color:#A6ACCD;">    timer = setTimeout(()=&gt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">      fn.apply(this,arguments)</span></span>
<span class="line"><span style="color:#A6ACCD;">    },delay)</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="节流-throttle" tabindex="-1">节流(throttle) <a class="header-anchor" href="#节流-throttle" aria-hidden="true">#</a></h4><p>所谓节流,就是指连续触发事件但是在n秒中执行一次函数,节流会稀释函数的执行频率.节流分时间戳版和定时器版. 应用场景就是 用户点击按钮,本次结果没有返回前,再点击无效.</p><p>鼠标不断点击触发，mousedown(单位时间内只触发一次)</p><p>监听滚动事件，比如是否滑到底部自动加载更多</p><p>设计思路:我们可以设计一种类似控制阀门一样定期开发的函数,事件触发时让函数执行一次,然后关闭这个阀门,过了一段时间后再次将这个阀门打开,再次触发事件.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">function throttle (fn,delay) {</span></span>
<span class="line"><span style="color:#A6ACCD;">  let valid = true;</span></span>
<span class="line"><span style="color:#A6ACCD;">  return function () {</span></span>
<span class="line"><span style="color:#A6ACCD;">    if(valid) {</span></span>
<span class="line"><span style="color:#A6ACCD;">      setTimeout (()=&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">        fn.applay(this,arguments);</span></span>
<span class="line"><span style="color:#A6ACCD;">        valid = true;</span></span>
<span class="line"><span style="color:#A6ACCD;">      },delay)</span></span>
<span class="line"><span style="color:#A6ACCD;">      valid = false;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="_3-5-闭包" tabindex="-1">3.5 闭包 <a class="header-anchor" href="#_3-5-闭包" aria-hidden="true">#</a></h3><ol><li>变量作用域</li></ol><p>要理解闭包,首先要理解javaxscrpt的特殊的变量作用域.</p><p>变量的作用于无非2种,全局变量和局部变量.</p><p>javascript语言的特别之处就在于:函数内部可以直接读取全局变量,但是在函数外部无法读取函数内部的局部变量. 闭包是为了解决全局变量污染的,能够读取其他函数内部变量的函数. 由于javascript中,只有函数内部的子函数才能读取局部变量,所以必报也可以理解成一个函数内部的函数. 所以,本质上,闭包时将函数内部的函数外部连接起来的桥梁. 闭包的缺点: （1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。 （2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值</p><h3 id="_3-6-原型链" tabindex="-1">3.6 原型链 <a class="header-anchor" href="#_3-6-原型链" aria-hidden="true">#</a></h3><p>简单理解就是原型组成的链,对象的_proto_它的时原型,而原型也是一个对象,也有_proto_属性,原型的_proto_又是原型的原型,就这样开业一致通过_proto_向上查找,这就是原型链,当向上找找到Object的原型的时候,原型为null.</p><p>原型对象和实例之间有什么作用呢?</p><p>通过一个构造函数创建出来的多个实例,如果都要添加一个方法,给每个实例去添加并不是一个明智的选择.这是就该用上原型了.</p>`,36),i=[p];function t(o,r,c,d,h,C){return l(),a("div",null,i)}const _=s(e,[["render",t]]);export{u as __pageData,_ as default};
